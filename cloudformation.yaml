AWSTemplateFormatVersion: 2010-09-09
Description: "Quick setup"
Parameters:
  Alias:
    Type: String
    Default: "demo"
    Description: Some alias to prefix resource names
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Selected Subnets in three AZs.  Make sure that there are at least 9 free IP addresses in 3 subnets. Each subnet should be in a different Availability Zone.
  SecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Selected SecurityGroupIds
  RepoURL:
    Type: String
    Default: "https://github.com/Natallia-Bahlai/demo-bedrock-kb.git"
    Description: URL of the source code repository
    
Resources:
  S3GeneralBucketXLS:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Alias}-xls-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  S3GeneralBucketCSV:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Alias}-csv-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  Notebook:
    Type: AWS::SageMaker::NotebookInstance
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      InstanceType: "ml.t3.medium"
      RoleArn: !GetAtt IAMExecutionRoleNotebook.Arn
      PlatformIdentifier: notebook-al2-v3
      SecurityGroupIds: !Ref SecurityGroupIds
      SubnetId: !Select [0, !Ref SubnetIds]
      DirectInternetAccess: "Enabled"
      RootAccess: Disabled
      DefaultCodeRepository: !Ref RepoURL

  IAMExecutionRoleNotebook: 
    Type: AWS::IAM::Role
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"                  
            Principal: 
              Service: 
                - "sagemaker.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: /
      RoleName: !Sub "${Alias}-notebook-execution-role"
      Policies:
        - PolicyName: "misc"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:GetBucketLocation"
                  - "s3:PutObject"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "sqlworkbench:GetSqlRecommendations"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "bedrock:InvokeModel"
                  - "bedrock:GetInferenceProfile"
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/us.anthropic.claude-3-5-sonnet-20241022-v2:0"
                  - !Sub "arn:aws:bedrock:*::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0"
                  - !Sub "arn:aws:bedrock:*::foundation-model/anthropic.claude-3-5-sonnet-20240620-v1:0"
              - Effect: Allow
                Action:
                  - "bedrock:GenerateQuery"
                Resource:
                  - "*"
              - Effect: "Allow"
                Action:
                - "bedrock:ListKnowledgeBases"
                - "bedrock:RetrieveAndGenerate"
                - "bedrock:Retrieve"
                - "bedrock:GenerateQuery"
                - "bedrock:GetKnowledgeBase"
                Resource:
                - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/*"
                - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/${KnowledgeBaseStructuredStore}"

  RedshiftAdminSecret:
    Type: AWS::SecretsManager::Secret
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      Description: AutoGenerated secret for the admin for Redshift Serverless
      #Only printable ASCII characters except for '/', '@', '"', ' ', '\', ''' may be used.
      GenerateSecretString:
        SecretStringTemplate: '{"username": "demouser"}'
        GenerateStringKey: password
        PasswordLength: 8
        IncludeSpace: false
        ExcludePunctuation: true
        ExcludeCharacters: '"@/\'
  
  IAMRoleRedshift:
    Type: "AWS::IAM::Role"
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: redshift.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - '*'
              - Effect: Allow
                Action: 
                  - "athena:GetDatabase"
                  - "athena:GetTableMetadata"
                Resource:
                  - !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:datacatalog/*'
              - Effect: Allow
                Action:
                  - "athena:GetQueryExecution"
                  - "athena:GetQueryResults"
                  - "athena:StartQueryExecution"
                Resource:
                  - !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/*'
          PolicyName: 'misc'
          
  RedshiftServerlessNS:
    Type: AWS::RedshiftServerless::Namespace
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      NamespaceName: "demo-ns"
      DbName: "dev"
      DefaultIamRoleArn: !GetAtt IAMRoleRedshift.Arn
      IamRoles:
        - !GetAtt IAMRoleRedshift.Arn
      ManageAdminPassword: false
      AdminUsername: !Join [ '', [ '{{resolve:secretsmanager:', !Ref RedshiftAdminSecret, ':SecretString:username}}' ] ]
      AdminUserPassword: !Join [ '', [ '{{resolve:secretsmanager:', !Ref RedshiftAdminSecret, ':SecretString:password}}' ] ]
      LogExports:
      - userlog
      - connectionlog

  RedshiftServerlessWG:
    Type: AWS::RedshiftServerless::Workgroup
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      WorkgroupName: "demo-wg"
      NamespaceName: !Ref RedshiftServerlessNS
      SecurityGroupIds: !Ref SecurityGroupIds
      SubnetIds: !Ref SubnetIds
      BaseCapacity: 8
      MaxCapacity: 512
      PubliclyAccessible: false
      ConfigParameters:
        - ParameterKey: enable_case_sensitive_identifier
          ParameterValue: true
        - ParameterKey: enable_user_activity_logging
          ParameterValue: true
        - ParameterKey: require_ssl
          ParameterValue: true

  KBDB:
    UpdateReplacePolicy: "Retain"
    Type: AWS::Glue::Database
    DeletionPolicy: "Delete"
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: "Database for KB"
        Name: !Sub "${Alias}-kb"

  IAMRoleKnowledgeBase:
    Type: "AWS::IAM::Role"
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      Path: "/service-role/"
      MaxSessionDuration: 3600
      RoleName: "demo-knowledge-base-role"
      Policies:
      - PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.titan-embed-text-v1"
            Action:
            - "bedrock:InvokeModel"
            Effect: "Allow"
          - Resource: "*"
            Action:
            - "redshift-data:GetStatementResult"
            - "redshift-data:DescribeStatement"
            - "redshift-data:CancelStatement"
            Effect: "Allow"
          - Resource: !GetAtt RedshiftServerlessWG.Workgroup.WorkgroupArn
            Action:
            - "redshift-serverless:GetCredentials"
            - "redshift-data:ExecuteStatement"
            Effect: "Allow"
          - Resource: "*"
            Action:
            - "sqlworkbench:GetSqlRecommendations"
            - "sqlworkbench:PutSqlGenerationContext"
            - "sqlworkbench:GetSqlGenerationContext"
            - "sqlworkbench:DeleteSqlGenerationContext"
            Effect: "Allow"
          - Resource: "*"
            Action:
            - "bedrock:GenerateQuery"
            Effect: "Allow"
          - Resource: "*"
            Action:
            - "s3:ListBucket"
            - "s3:GetObject"
            Effect: "Allow"
          - Resource:
            - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog"
            - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${KBDB}"
            - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${KBDB}/*"
            Action:
            - "glue:GetDatabases"
            - "glue:GetDatabase"
            - "glue:GetTables"
            - "glue:GetTable"
            - "glue:GetPartitions"
            - "glue:GetPartition"
            - "glue:SearchTables" 
            Effect: "Allow"
        PolicyName: "misc"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: 
              - "bedrock.amazonaws.com"
              - "glue.amazonaws.com"
              
  KnowledgeBaseStructuredStore:
    Type: AWS::Bedrock::KnowledgeBase
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      Name: !Sub "${Alias}-knowledge-base-csv"
      Description: "Knowledge Base with a structured data store"
      RoleArn: !GetAtt IAMRoleKnowledgeBase.Arn
      KnowledgeBaseConfiguration:
        Type: SQL
        SqlKnowledgeBaseConfiguration:
          Type: REDSHIFT
          RedshiftConfiguration:
            QueryEngineConfiguration:
              Type: SERVERLESS
              ServerlessConfiguration:
                WorkgroupArn: !GetAtt RedshiftServerlessWG.Workgroup.WorkgroupArn
                AuthConfiguration:
                  Type: IAM
                  #Type: "USERNAME_PASSWORD" #KnowledgeBase type SQL with query engine type REDSHIFT with AWS_DATA_CATALOG storage type must use IAM authentication
                  #UsernamePasswordSecretArn: !Ref RedshiftAdminSecret
            StorageConfigurations:
              - Type: AWS_DATA_CATALOG
                AwsDataCatalogConfiguration:
                  TableNames:
                    - !Sub "${KBDB}.*"
            QueryGenerationConfiguration:
              ExecutionTimeoutSeconds: 60

  RedshiftDataSource:
    Type: AWS::Bedrock::DataSource
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    DependsOn: KnowledgeBaseStructuredStore
    Properties:
      KnowledgeBaseId: !Ref KnowledgeBaseStructuredStore
      Name: !Sub "${Alias}-datasource"
      Description: Data source for Redshift Serverless workgroup to enable query engine
      DataSourceConfiguration:
        Type: REDSHIFT_METADATA

  CSVclassifier:
    Type: 'AWS::Glue::Classifier'
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      CsvClassifier:
        ContainsHeader: PRESENT
        Delimiter: ','
        Name: !Sub "${Alias}-csv-classifier"
        QuoteSymbol: '"'

  Crawler:
    Type: AWS::Glue::Crawler
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      Name: !Sub "${Alias}-crawler-kb"
      Role: !GetAtt IAMRoleCrawler.Arn
      DatabaseName: !Ref KBDB
      Targets:
        S3Targets:
          - Path: !Ref S3GeneralBucketCSV
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      #Classifiers: 
      #  - !Ref CSVclassifier

  IAMRoleCrawler:
    Type: "AWS::IAM::Role"
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      Path: "/service-role/"
      MaxSessionDuration: 3600
      RoleName: !Sub "${Alias}-role-crawler"
      Policies:
      - PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Resource: "*"
            Action:
            - "glue:*"
            - "s3:GetBucketLocation"
            - "s3:ListBucket"
            - "s3:ListAllMyBuckets"
            - "s3:GetBucketAcl"
            - "ec2:DescribeVpcEndpoints"
            - "ec2:DescribeRouteTables"
            - "ec2:CreateNetworkInterface"
            - "ec2:DeleteNetworkInterface"
            - "ec2:DescribeNetworkInterfaces"
            - "ec2:DescribeSecurityGroups"
            - "ec2:DescribeSubnets"
            - "ec2:DescribeVpcAttribute"
            - "iam:ListRolePolicies"
            - "iam:GetRole"
            - "iam:GetRolePolicy"
            - "cloudwatch:PutMetricData"
            Effect: "Allow"
          - Resource: "*" #!Sub "arn:aws:s3:::${S3GeneralBucketCSV}"
            Action:
            - "s3:GetObject"
            - "s3:PutObject"
            Effect: "Allow"
          - Resource: "arn:aws:logs:*:*:*:*"
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Effect: "Allow"
        PolicyName: "misc"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "glue.amazonaws.com"


